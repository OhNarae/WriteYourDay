<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mappers.diary">

	<select id="getEventList" resultType="vo.DEventVO">
		select * from EVENT_TB 
		where member_seq = #{member_seq} and 
			((start_date >= TO_DATE(#{start_date}, 'YYYY.MM.dd') and start_date <![CDATA[<]]> TO_DATE(#{end_date}, 'YYYY.MM.dd')) or (end_date > TO_DATE(#{start_date}, 'YYYY.MM.dd') and end_date <![CDATA[<]]> TO_DATE(#{end_date}, 'YYYY.MM.dd')))
		order by event_seq desc
	</select>
	
	<select id="getEvent" resultType="vo.DEventVO">
		select * from EVENT_TB 
		where member_seq = #{member_seq} and event_seq = #{event_seq}
	</select>
	
	<select id="getEventMemo" resultType="vo.DMemoVO">
		select * from EVENT_MEMO_TB em 
			join MEMO_SET_TB ms on em.member_seq = ms.member_seq and em.memo_set_seq = ms.seq
			join MEMO_TB m on ms.seq = m.set_seq and em.memo_seq = m.seq
		where em.member_seq = #{member_seq} and em.event_seq = #{event_seq}
	</select>
	
	<insert id="insertEvent">
		<selectKey resultType="integer" keyProperty="event_seq" order="BEFORE">
	        select nvl(max(event_seq), 0)+1 from EVENT_TB where member_seq = #{member_seq}  
	    </selectKey>  
	    
		insert into EVENT_TB ( member_seq, event_seq, title, start_date, end_date, color) 
		values( #{member_seq}, #{event_seq}, #{title}, TO_DATE(#{start_date}, 'YYYY.MM.dd HH24:mi'), TO_DATE(#{end_date}, 'YYYY.MM.dd HH24:mi'), #{color})
		
<!-- 		<if test="memo_list!=null">
		insert into EVENT_MEMO_TB(member_seq, event_seq, memo_set_seq, memo_seq) values	
		<foreach collection="memo_list" item="item" separator=" , ">
            (#{member_seq}, #{EventSeq}, #{item.set_seq}, #{item.seq})
        </foreach>	
        </if> -->
	</insert>
	
	<insert id="copyEvent">
		insert into EVENT_TB ( member_seq, event_seq, title, start_date, end_date, color) 
		select #{you_member_seq}, (select nvl(max(event_seq), 0)+1 from EVENT_TB where member_seq = #{you_member_seq}),  title, start_date, end_date, color
		from EVENT_TB where member_seq = #{member_seq} and event_seq = #{event_seq}
	</insert>
	
	<delete id="deleteEvent">
		delete EVENT_TB 
		where member_seq = #{member_seq} and event_seq = #{event_seq}
	</delete>
	
	<select id="getCashList" resultType="vo.DCashbookVO">
		select * from CASHBOOK_TB 
		where member_seq = #{member_seq} and (pay_date >= TO_DATE(#{start_date}, 'YYYY.MM.dd') and pay_date <![CDATA[<]]> TO_DATE(#{end_date}, 'YYYY.MM.dd'))
		order by pay_date
	</select>

	<insert id="insertCash">
		<selectKey resultType="integer" keyProperty="seq" order="BEFORE">
	        select nvl(max(seq), 0)+1 from CASHBOOK_TB where member_seq = #{member_seq}  
	    </selectKey>  
	    
		insert into CASHBOOK_TB ( member_seq, seq, pay_date, pay_place, pay_things, price) 
		values( #{member_seq}, #{seq}, TO_DATE(#{pay_date}, 'YYYY.MM.dd HH24:mi:ss'), #{pay_place}, #{pay_things}, #{price})
	</insert>
	
	<delete id="deleteCash">
		delete CASHBOOK_TB 
		where member_seq = #{member_seq} and seq = #{seq}
	</delete>
	
	<insert id="insertEventShare">
		insert into EVENT_SHARE_TB ( member_seq, event_seq, you_member_seq, status, req_date) 
		values( #{member_seq}, #{event_seq}, #{you_member_seq}, 0, sysdate)
	</insert>
	
	<select id="getEventShareList" resultType="vo.DEventShareVO">
		select es.*, m.id member_id, e.title event_title   
		from EVENT_SHARE_TB es 
		join MEMBER_TB m on es.member_seq = m.seq
		join EVENT_TB e on es.member_seq = e.member_seq and es.event_seq = e.event_seq
		where you_member_seq = #{you_member_seq} and status = #{status}
		order by req_date
	</select>
	
	<update id="updateEventShare">
		update EVENT_SHARE_TB set status = #{status}
		<choose>
			<when test="status==1 or status==2">, resp_date = sysdate </when>
			<when test="status==3">, cancle_date = sysdate </when>
		</choose>
		where member_seq=#{member_seq} and event_seq = #{event_seq} and you_member_seq=#{you_member_seq}
	</update>

</mapper>